using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;

namespace DataAccessObjects;

public interface ICertificateDAO : IGenericDAO<Certificate>
{
    Task<IEnumerable<Certificate>> GetByStudentIdAsync(int studentId);
    Task<IEnumerable<Certificate>> GetByCourseIdAsync(int courseId);
}

public class CertificateDAO : ICertificateDAO
{
    private readonly Prn212skillsHoannn6Context _context;

    public CertificateDAO()
    {
        _context = new Prn212skillsHoannn6Context();
    }

    public async Task<IEnumerable<Certificate>> GetAllAsync()
    {
        return await _context.Certificates.Include(c => c.Student).Include(c => c.Course).ToListAsync();
    }

    public async Task<Certificate?> GetByIdAsync(int id)
    {
        return await _context.Certificates.Include(c => c.Student).Include(c => c.Course).FirstOrDefaultAsync(c => c.CertificateId == id);
    }

    public async Task<IEnumerable<Certificate>> GetByStudentIdAsync(int studentId)
    {
        return await _context.Certificates.Where(c => c.StudentId == studentId).ToListAsync();
    }

    public async Task<IEnumerable<Certificate>> GetByCourseIdAsync(int courseId)
    {
        return await _context.Certificates.Where(c => c.CourseId == courseId).ToListAsync();
    }

    public async Task AddAsync(Certificate entity)
    {
        await _context.Certificates.AddAsync(entity);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(Certificate entity)
    {
        var existing = await _context.Certificates.FindAsync(entity.CertificateId);
        if (existing != null)
        {
            existing.StudentId = entity.StudentId;
            existing.CourseId = entity.CourseId;
            existing.FilePath = entity.FilePath;
            await _context.SaveChangesAsync();
        }
    }

    public async Task DeleteAsync(int id)
    {
        var entity = await _context.Certificates.FindAsync(id);
        if (entity != null)
        {
            _context.Certificates.Remove(entity);
            await _context.SaveChangesAsync();
        }
    }
}