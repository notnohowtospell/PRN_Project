using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;

namespace DataAccessObjects;

public interface IFeedbackDAO : IGenericDAO<Feedback>
{
    Task<IEnumerable<Feedback>> GetByStudentIdAsync(int studentId);
    Task<IEnumerable<Feedback>> GetByCourseIdAsync(int courseId);
}

public class FeedbackDAO : IFeedbackDAO
{
    private readonly Prn212skillsHoannn6Context _context;

    public FeedbackDAO()
    {
        _context = new Prn212skillsHoannn6Context();
    }

    public async Task<IEnumerable<Feedback>> GetAllAsync()
    {
        return await _context.Feedbacks.Include(f => f.Student).Include(f => f.Course).ToListAsync();
    }

    public async Task<Feedback?> GetByIdAsync(int id)
    {
        return await _context.Feedbacks.Include(f => f.Student).Include(f => f.Course).FirstOrDefaultAsync(f => f.FeedbackId == id);
    }

    public async Task<IEnumerable<Feedback>> GetByStudentIdAsync(int studentId)
    {
        return await _context.Feedbacks.Where(f => f.StudentId == studentId).ToListAsync();
    }

    public async Task<IEnumerable<Feedback>> GetByCourseIdAsync(int courseId)
    {
        return await _context.Feedbacks.Where(f => f.CourseId == courseId).ToListAsync();
    }

    public async Task AddAsync(Feedback entity)
    {
        await _context.Feedbacks.AddAsync(entity);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateAsync(Feedback entity)
    {
        var existing = await _context.Feedbacks.FindAsync(entity.FeedbackId);
        if (existing != null)
        {
            existing.StudentId = entity.StudentId;
            existing.CourseId = entity.CourseId;
            existing.Rating = entity.Rating;
            existing.Comment = entity.Comment;
            existing.FeedbackDate = entity.FeedbackDate;
            await _context.SaveChangesAsync();
        }
    }

    public async Task DeleteAsync(int id)
    {
        var entity = await _context.Feedbacks.FindAsync(id);
        if (entity != null)
        {
            _context.Feedbacks.Remove(entity);
            await _context.SaveChangesAsync();
        }
    }
}