using BusinessObjects.Models;
using DataAccessObjects;
using Repositories.Interfaces;

namespace Repositories;

public class CertificateRepository : ICertificateRepository
{
    private readonly ICertificateDAO _certificateDAO;

    public CertificateRepository(ICertificateDAO certificateDAO)
    {
        _certificateDAO = certificateDAO;
    }

    public async Task<IEnumerable<Certificate>> GetAllAsync()
    {
        return await _certificateDAO.GetAllAsync();
    }

    public async Task<Certificate?> GetByIdAsync(int id)
    {
        return await _certificateDAO.GetByIdAsync(id);
    }

    public async Task AddAsync(Certificate entity)
    {
        await _certificateDAO.AddAsync(entity);
    }

    public async Task UpdateAsync(Certificate entity)
    {
        await _certificateDAO.UpdateAsync(entity);
    }

    public async Task DeleteAsync(int id)
    {
        await _certificateDAO.DeleteAsync(id);
    }

    public async Task SaveChangesAsync()
    {
        await Task.CompletedTask;
    }

    public async Task<IEnumerable<Certificate>> GetByStudentIdAsync(int studentId)
    {
        return await _certificateDAO.GetByStudentIdAsync(studentId);
    }

    public async Task<IEnumerable<Certificate>> GetByCourseIdAsync(int courseId)
    {
        return await _certificateDAO.GetByCourseIdAsync(courseId);
    }
}