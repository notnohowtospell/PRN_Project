using BusinessObjects.Models;
using DataAccessObjects;
using Repositories.Interfaces;

namespace Repositories;

public class NotificationRepository : INotificationRepository
{
    private readonly INotificationDAO _notificationDAO;

    public NotificationRepository(INotificationDAO notificationDAO)
    {
        _notificationDAO = notificationDAO;
    }

    public async Task<IEnumerable<Notification>> GetAllAsync()
    {
        return await _notificationDAO.GetAllAsync();
    }

    public async Task<Notification?> GetByIdAsync(int id)
    {
        return await _notificationDAO.GetByIdAsync(id);
    }

    public async Task AddAsync(Notification entity)
    {
        await _notificationDAO.AddAsync(entity);
    }

    public async Task UpdateAsync(Notification entity)
    {
        await _notificationDAO.UpdateAsync(entity);
    }

    public async Task DeleteAsync(int id)
    {
        await _notificationDAO.DeleteAsync(id);
    }

    public async Task SaveChangesAsync()
    {
        // SaveChanges is handled within the DAO methods
        await Task.CompletedTask;
    }

    public async Task<IEnumerable<Notification>> GetByStudentIdAsync(int studentId)
    {
        return await _notificationDAO.GetByStudentIdAsync(studentId);
    }
}