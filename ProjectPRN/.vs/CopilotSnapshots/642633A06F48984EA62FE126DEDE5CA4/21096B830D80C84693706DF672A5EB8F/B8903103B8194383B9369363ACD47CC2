using BusinessObjects.Models;
using DataAccessObjects;
using Repositories.Interfaces;

namespace Repositories;

public class StudentRepository : IStudentRepository
{
    private readonly IStudentDAO _studentDAO;

    public StudentRepository(IStudentDAO studentDAO)
    {
        _studentDAO = studentDAO;
    }

    public async Task<IEnumerable<Student>> GetAllAsync()
    {
        return await _studentDAO.GetAllAsync();
    }

    public async Task<Student?> GetByIdAsync(int id)
    {
        return await _studentDAO.GetByIdAsync(id);
    }

    public async Task AddAsync(Student entity)
    {
        await _studentDAO.AddAsync(entity);
    }

    public async Task UpdateAsync(Student entity)
    {
        await _studentDAO.UpdateAsync(entity);
    }

    public async Task DeleteAsync(int id)
    {
        await _studentDAO.DeleteAsync(id);
    }

    public async Task SaveChangesAsync()
    {
        // SaveChanges is handled within the DAO methods
        await Task.CompletedTask;
    }

    public async Task<IEnumerable<Student>> GetByEmail(string email)
    {
        var student = await _studentDAO.GetByEmailAsync(email);
        return student != null ? new List<Student> { student } : new List<Student>();
    }

    public async Task<IEnumerable<Student>> GetByStatus(string status)
    {
        return await _studentDAO.GetByStatusAsync(status);
    }
}